#!/usr/bin/perl
# $Id: txt2html,v 1.1 2019-10-31 13:32:24-07 - - $
#
# NAME
#    txt2html - convert text file to html, editing http: strings
#
# SYNOPSIS
#    txt2html textfile
#
# DESCRIPTION
#    Reads textfile to replace strings of the form http:\S+*
#    with the directory name that it matches, if the directory
#    exists.  Creates an html file from the textfile by editing
#    all http: strings into an html link.  The file is created
#    with the suffix .txt or .text replaced by .html
#    It also converts the text file into Postscript and PDF.
#

use strict;
use warnings;

$0 =~ s|^(.*/)?([^/]+)/*$|$2|;
my $exit_status = 0;
END {exit $exit_status}
sub note(@) { print STDERR "$0: @_"; };
$SIG{'__WARN__'} = sub { note @_; $exit_status = 1; };
$SIG{'__DIE__'} = sub { warn @_; exit; };

if (@ARGV != 1) {
   print STDERR "Usage: $0 textfile\n";
   $exit_status = 1;
   exit
}

my $textname = shift;
open TEXTIN, "<$textname" or die "$textname: $!\n";
print STDERR "open <$textname: OK\n";
my @text = <TEXTIN>;
close TEXTIN;

for my $line (@text) {
   next unless $line =~ m/((^|\b)https?:)(\S+)\*/;
   my ($prefix, $dirpat) = ($1, $3);
   my $dir = glob "$dirpat*";
   next unless defined $dir and -d $dir;
   $line =~ s|$prefix$dirpat\*|$prefix$dir/|;
}

system "cid + $textname";
open TEXTOUT, ">$textname" or die "$textname: $!\n";
print TEXTOUT @text;
close TEXTOUT;

my %htchars = qw (& &amp; < &lt; > &gt;);
for my $line (@text) {
   $line =~ s|[&<>]|$htchars{$&}|g;
   $line =~ s{(^|\b)https?:\S+}{<A HREF=$&>$&</A>}g;
}

my $titlename = $textname;
$titlename =~ s/\.(txt|text|cat)$//;
my $htmlname = "$titlename.html";

my $pwd = `pwd`;
chomp $pwd;
$pwd =~ s|/afs/cats.ucsc.edu/courses/||;

my $bg_empty_color   = "#2F2F2F";
my $fg_hover_color   = "#FF0000";
my $fg_link_color    = "#00FFFF";
my $fg_plain_color   = "#2FFF2F";
my $fg_visited_color = "#FFFF00";

my @headtext = <<__END_HEADTEXT__;
   <HEAD>
   <TITLE>~$pwd/$titlename</TITLE>
   <STYLE> 
   body {
      color: $fg_plain_color !important;
      background-color: $bg_empty_color !important;
   }
   A:link {color: $fg_link_color}
   A:visited {color: $fg_visited_color}
   A:hover {color: $fg_hover_color}
   </STYLE>
   </HEAD> 
   <BODY>
__END_HEADTEXT__
map {s/^   //mg} @headtext;

open HTMLOUT, ">$htmlname" or die "$htmlname: $!\n";
print STDERR "open >$htmlname: OK\n";
print HTMLOUT @headtext;
print HTMLOUT "<PRE>\n";
print HTMLOUT @text;
print HTMLOUT "</PRE>\n</BODY>\n";
close HTMLOUT;

system "ls -laofg $textname $htmlname";

